val_PLint = NULL
val_PL = NULL
B=5000
n = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Wilcoxon")
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
gc()
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
difftime(end.time,start.time, units = "secs")
set.seed(123)
Gdn = NULL
Dp_C = NULL
LP = NULL
ILP = NULL
PLint = NULL
PL = NULL
val_Gdn = NULL
val_Dp = NULL
val_LP = NULL
val_ILP = NULL
val_PLint = NULL
val_PL = NULL
for(n in c(10,50,100, 200, 500,1000)){
B = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
if(i %in% 1:2){
method.list.all[[1]] = list(name = "Wilcoxon")
}else{
method.list.all[[1]] = list(name = "Stephenson", s = floor(n/4))
}
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
LP = c(LP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
end.time = Sys.time()
ILP = c(ILP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
Gdn = c(Gdn, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
Dp_C = c(Dp_C, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
PLint = c(PLint, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
PL = c(PL, difftime(end.time,start.time, units = "secs"))
}
set.seed(123)
Gdn = NULL
Dp_C = NULL
LP = NULL
ILP = NULL
PLint = NULL
PL = NULL
val_Gdn = NULL
val_Dp = NULL
val_LP = NULL
val_ILP = NULL
val_PLint = NULL
val_PL = NULL
for(n in c(10,50,100, 200, 500,1000)){
B = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Wilcoxon")
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
LP = c(LP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
end.time = Sys.time()
ILP = c(ILP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
Gdn = c(Gdn, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
Dp_C = c(Dp_C, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
PLint = c(PLint, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
PL = c(PL, difftime(end.time,start.time, units = "secs"))
}
cbind(LP,
ILP,
Dp_C,
Gdn,
PL,
PLint
)
cbind(val_LP,
val_ILP,
val_Dp,
val_Gdn,
val_PL,
val_PLint
)
set.seed(123)
Gdn = NULL
Dp_C = NULL
LP = NULL
ILP = NULL
PLint = NULL
PL = NULL
val_Gdn = NULL
val_Dp = NULL
val_LP = NULL
val_ILP = NULL
val_PLint = NULL
val_PL = NULL
for(n in c(10,50,100, 200, 500,1000)){
B = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Stephenson", s = floor(n/4))
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
LP = c(LP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
end.time = Sys.time()
ILP = c(ILP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
Gdn = c(Gdn, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
Dp_C = c(Dp_C, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
PLint = c(PLint, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
PL = c(PL, difftime(end.time,start.time, units = "secs"))
}
cbind(LP,
ILP,
Dp_C,
Gdn,
PL,
PLint
)
cbind(val_LP,
val_ILP,
val_Dp,
val_Gdn,
val_PL,
val_PLint
)
set.seed(123)
Gdn = NULL
Dp_C = NULL
LP = NULL
ILP = NULL
PLint = NULL
PL = NULL
val_Gdn = NULL
val_Dp = NULL
val_LP = NULL
val_ILP = NULL
val_PLint = NULL
val_PL = NULL
B=5000
for(B in c(100,500, 900,1000, 2000,3000, 4000)){
n = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Stephenson", s = floor(n/4))
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
LP = c(LP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
end.time = Sys.time()
ILP = c(ILP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
Gdn = c(Gdn, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
Dp_C = c(Dp_C, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
PLint = c(PLint, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
PL = c(PL, difftime(end.time,start.time, units = "secs"))
}
cbind(LP,
ILP,
Dp_C,
Gdn,
PL,
PLint
)
cbind(val_LP,
val_ILP,
val_Dp,
val_Gdn,
val_PL,
val_PLint
)
B=5000
n = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Stephenson", s = floor(n/4))
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
for(i in 1:length(coeflist)){
coefi = coeflist[i]
coefi[2,] = coef[2,]/(1e6)
coeflist[i] = coefi
}
for(i in 1:length(coeflist)){
coefi = coeflist[i]
coefi[2,] = coefi[2,]/(1e6)
coeflist[i] = coefi
}
for(i in 1:length(coeflist)){
coefi = coeflist[[i]]
coefi[2,] = coefi[2,]/(1e6)
coeflist[i] = coefi
}
head(coeflist)
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
for(i in 1:length(coeflist)){
coefi = coeflist[[i]]
coefi[2,] = coefi[2,]/(1e6)
coeflist[[i]] = coefi
}
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
gc()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
model = list()
Q = NULL
B = length(coeflist)
nb = vector(length = B)
for(i in 1:B){
Q = c(Q, coeflist[[i]][2,])
nb[i] = ncol(coeflist[[i]])
}
n = length(Q)
A = matrix(0, nrow = B+1, ncol = n)
indx = c(0, cumsum(nb))
for(i in 1:B){
A[i,(indx[i]+1):indx[i+1]] = 1
A[B+1,(indx[i]+1):indx[i+1]] = coeflist[[i]][1,]
}
View(A)
qt(0.05, 39)
qt(0.025, 39)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(Matrix)
source("C:/Users/ysu17/Box/Stratified Quantile/Code_2nd_Submission/RI_Quantile.R")
setwd("C:/Users/ysu17/Box/Stratified Quantile/QIoT/src")
sourceCpp("Mcknap.cpp")
source("C:/Users/ysu17/Box/Stratified Quantile/Code_2nd_Submission/RI_Quantile.R")
library(gurobi)
set.seed(123)
Gdn = NULL
Dp_C = NULL
LP = NULL
ILP = NULL
PLint = NULL
PL = NULL
val_Gdn = NULL
val_Dp = NULL
val_LP = NULL
val_ILP = NULL
val_PLint = NULL
val_PL = NULL
for(B in c(100,500, 900,1000, 2000,3000, 4000)){
n = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Stephenson", s = floor(n/4))
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
LP = c(LP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
end.time = Sys.time()
ILP = c(ILP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
Gdn = c(Gdn, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
Dp_C = c(Dp_C, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
PLint = c(PLint, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
PL = c(PL, difftime(end.time,start.time, units = "secs"))
}
cbind(LP,
ILP,
Dp_C,
Gdn,
PL,
PLint
)
cbind(val_LP,
val_ILP,
val_Dp,
val_Gdn,
val_PL,
val_PLint
)
set.seed(123)
Gdn = NULL
Dp_C = NULL
LP = NULL
ILP = NULL
PLint = NULL
PL = NULL
val_Gdn = NULL
val_Dp = NULL
val_LP = NULL
val_ILP = NULL
val_PLint = NULL
val_PL = NULL
for(B in c(100,500, 900,1000, 2000,3000, 4000)){
n = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Stephenson", s = 6)
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
LP = c(LP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
end.time = Sys.time()
ILP = c(ILP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
Gdn = c(Gdn, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
Dp_C = c(Dp_C, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
PLint = c(PLint, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
PL = c(PL, difftime(end.time,start.time, units = "secs"))
}
set.seed(123)
Gdn = NULL
Dp_C = NULL
LP = NULL
ILP = NULL
PLint = NULL
PL = NULL
val_Gdn = NULL
val_Dp = NULL
val_LP = NULL
val_ILP = NULL
val_PLint = NULL
val_PL = NULL
for(B in c(100,500, 900,1000, 2000,3000, 4000,5000)){
n = 100
N = n*B
block = rep(1:B, each = n)
Z = rep(rep(c(0,1), each = n/2), B)
Y = rnorm(N) + Z
k = floor(N*0.9)
method.list.all = list()
method.list.all[[1]] = list(name = "Stephenson", s = 6)
coeflist = test_stat_matrix_block(Z, Y, block, c=0, method.list.all)
start.time = Sys.time()
val_LP = c(val_LP, Gurobi_sol(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
LP = c(LP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_ILP = c(val_ILP, Gurobi_sol(coeflist, N - k, exact = TRUE)$obj)
end.time = Sys.time()
ILP = c(ILP, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Gdn = c(val_Gdn, LpGreedy_On_C(coeflist, N - k)$obj)
end.time = Sys.time()
Gdn = c(Gdn, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_Dp = c(val_Dp, DP_C(coeflist, N - k)$obj)
end.time = Sys.time()
Dp_C = c(Dp_C, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PLint = c(val_PLint, Gurobi_sol_PL(coeflist, N - k)$obj)
end.time = Sys.time()
PLint = c(PLint, difftime(end.time,start.time, units = "secs"))
start.time = Sys.time()
val_PL = c(val_PL, Gurobi_sol_PL(coeflist, N - k, exact = FALSE)$obj)
end.time = Sys.time()
PL = c(PL, difftime(end.time,start.time, units = "secs"))
}
